{"ast":null,"code":"import { FormGroup, FormControl, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../apiservice.service\";\nimport * as i2 from \"@angular/router\";\nclass CreateComponent {\n  constructor(service, router) {\n    this.service = service;\n    this.router = router;\n    this.userForm = new FormGroup({\n      'username': new FormControl('', Validators.required),\n      'password': new FormControl('', Validators.required),\n      'password2': new FormControl('', [Validators.required, this.passwordMatchValidator.bind(this)])\n    });\n  }\n  ngOnInit() {\n    this.getparamid = this.router.snapshot.paramMap.get('id');\n    console.log(\"this.getparamid:\", this.getparamid);\n    this.service.getSingleData(this.getparamid).subscribe(res => {\n      console.log(res, 'res==>');\n      this.userForm.patchValue({\n        username: res.data[0].username,\n        password: res.data[0].password,\n        password2: res.data[0].password\n      });\n    });\n  }\n  // Create user\n  userSubmit() {\n    console.log(\"wtfff\");\n    const username = this.userForm.value.username;\n    const password = this.userForm.value.password;\n    const password2 = this.userForm.value.password2;\n    if (this.userForm.valid) {\n      if (password !== password2) {\n        this.errormsg = 'Les mots de passe ne correspondent pas!';\n      } else {\n        this.service.createData(this.userForm.value).subscribe(res => {\n          console.log(res, 'res==>');\n          this.userForm.reset();\n          this.successmsg = res.message;\n        });\n      }\n    } else {\n      this.errormsg = 'Tous les champs doivent être complétés!';\n    }\n  }\n  passwordMatchValidator(control) {\n    const password = control.get('password')?.value;\n    const password2 = control.get('password2')?.value;\n    return password === password2 ? null : {\n      passwordMismatch: true\n    };\n  }\n  // Update user\n  userUpdate() {\n    console.log(\"user Update called\");\n    if (this.userForm.valid) {\n      console.log(\"snif\");\n      this.service.updateData(this.userForm.value, this.getparamid).subscribe(res => {\n        this.successmsg = res.message;\n        console.log(\"user Update Done\");\n      });\n    } else {\n      this.errormsg = \"Tous les champs sont requis!\";\n    }\n  }\n}\nCreateComponent.ɵfac = function CreateComponent_Factory(t) {\n  return new (t || CreateComponent)(i0.ɵɵdirectiveInject(i1.ApiserviceService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\nCreateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CreateComponent,\n  selectors: [[\"app-create\"]],\n  decls: 0,\n  vars: 0,\n  template: function CreateComponent_Template(rf, ctx) {},\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});\nexport { CreateComponent };","map":{"version":3,"names":["FormGroup","FormControl","Validators","CreateComponent","constructor","service","router","userForm","required","passwordMatchValidator","bind","ngOnInit","getparamid","snapshot","paramMap","get","console","log","getSingleData","subscribe","res","patchValue","username","data","password","password2","userSubmit","value","valid","errormsg","createData","reset","successmsg","message","control","passwordMismatch","userUpdate","updateData","i0","ɵɵdirectiveInject","i1","ApiserviceService","i2","ActivatedRoute","selectors","decls","vars","template","CreateComponent_Template","rf","ctx","styles"],"sources":["C:\\UTBM\\INFO02\\WE4B\\Projet\\frontend\\src\\app\\create\\create.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {FormGroup, FormControl, Validators, AbstractControl, ValidationErrors} from '@angular/forms';\nimport { ApiserviceService } from '../apiservice.service';\nimport {ActivatedRoute} from '@angular/router';\n\n@Component({\n  selector: 'app-create',\n  templateUrl: './create.component.html',\n  styleUrls: ['./create.component.css']\n})\nexport class CreateComponent {\n\n  constructor(private service:ApiserviceService, private router:ActivatedRoute) {}\n\n  errormsg:any;\n  successmsg:any;\n  getparamid:any;\n\n  ngOnInit(): void {\n    this.getparamid = this.router.snapshot.paramMap.get('id');\n    console.log(\"this.getparamid:\", this.getparamid);\n  \n    this.service.getSingleData(this.getparamid).subscribe((res) => {\n      console.log(res, 'res==>');\n      this.userForm.patchValue({\n        username: res.data[0].username,\n        password: res.data[0].password,\n        password2: res.data[0].password\n      });\n    });\n  }\n\n  userForm = new FormGroup({\n    'username': new FormControl('', Validators.required),\n    'password': new FormControl('', Validators.required),\n    'password2': new FormControl('', [Validators.required, this.passwordMatchValidator.bind(this)])\n  });\n  \n  // Create user\n  userSubmit() {\n\n    console.log(\"wtfff\");\n    const username = this.userForm.value.username;\n    const password = this.userForm.value.password;\n    const password2 = this.userForm.value.password2;\n  \n    if (this.userForm.valid) {\n      if (password !== password2) {\n        this.errormsg = 'Les mots de passe ne correspondent pas!';\n      } else {\n        this.service.createData(this.userForm.value).subscribe((res) => {\n          console.log(res, 'res==>');\n          this.userForm.reset();\n          this.successmsg = res.message;\n        });\n      }\n    } else {\n      this.errormsg = 'Tous les champs doivent être complétés!';\n    }\n  }\n\n  passwordMatchValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.get('password')?.value;\n    const password2 = control.get('password2')?.value;\n  \n    return password === password2 ? null : { passwordMismatch: true };\n  }\n\n  // Update user\n  userUpdate() {\n\n    console.log(\"user Update called\");\n    \n    if(this.userForm.valid) {\n\n      console.log(\"snif\")\n\n      this.service.updateData(this.userForm.value, this.getparamid).subscribe((res)=>{\n          this.successmsg = res.message;\n          console.log(\"user Update Done\");\n      });\n\n    } else {\n\n      this.errormsg = \"Tous les champs sont requis!\"\n       \n    }\n\n  }\n\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}