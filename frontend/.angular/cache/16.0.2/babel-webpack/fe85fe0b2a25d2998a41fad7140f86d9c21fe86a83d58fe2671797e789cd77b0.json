{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\nlet CreateComponent = class CreateComponent {\n  constructor(service, router) {\n    this.service = service;\n    this.router = router;\n    this.userForm = new FormGroup({\n      'username': new FormControl('', Validators.required),\n      'password': new FormControl('', Validators.required),\n      'password2': new FormControl('', [Validators.required, this.passwordMatchValidator.bind(this)])\n    });\n  }\n  ngOnInit() {\n    this.getparamid = this.router.snapshot.paramMap.get('id');\n  }\n  userSubmit() {\n    const username = this.userForm.value.username;\n    const password = this.userForm.value.password;\n    const password2 = this.userForm.value.password2;\n    if (this.userForm.valid) {\n      if (password !== password2) {\n        this.errormsg = 'Les mots de passe ne correspondent pas!';\n      } else {\n        this.service.createData(this.userForm.value).subscribe(res => {\n          console.log(res, 'res==>');\n          this.userForm.reset();\n          this.successmsg = res.message;\n        });\n      }\n    } else {\n      this.errormsg = 'Tous les champs doivent être complétés!';\n    }\n  }\n  passwordMatchValidator(control) {\n    const password = control.get('password')?.value;\n    const password2 = control.get('password2')?.value;\n    return password === password2 ? null : {\n      passwordMismatch: true\n    };\n  }\n};\nCreateComponent = __decorate([Component({\n  selector: 'app-create',\n  templateUrl: './create.component.html',\n  styleUrls: ['./create.component.css']\n})], CreateComponent);\nexport { CreateComponent };","map":{"version":3,"names":["Component","FormGroup","FormControl","Validators","CreateComponent","constructor","service","router","userForm","required","passwordMatchValidator","bind","ngOnInit","getparamid","snapshot","paramMap","get","userSubmit","username","value","password","password2","valid","errormsg","createData","subscribe","res","console","log","reset","successmsg","message","control","passwordMismatch","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\UTBM\\INFO02\\WE4B\\Projet\\frontend\\src\\app\\create\\create.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport {FormGroup, FormControl, Validators, AbstractControl, ValidationErrors} from '@angular/forms';\nimport { ApiserviceService } from '../apiservice.service';\nimport {ActivatedRoute} from '@angular/router';\n\n@Component({\n  selector: 'app-create',\n  templateUrl: './create.component.html',\n  styleUrls: ['./create.component.css']\n})\nexport class CreateComponent {\n\n  constructor(private service:ApiserviceService, private router:ActivatedRoute) {}\n\n  errormsg:any;\n  successmsg:any;\n  getparamid:any;\n\n  ngOnInit():void {\n    this.getparamid = this.router.snapshot.paramMap.get('id');\n  }\n\n  userForm = new FormGroup({\n    'username': new FormControl('', Validators.required),\n    'password': new FormControl('', Validators.required),\n    'password2': new FormControl('', [Validators.required, this.passwordMatchValidator.bind(this)])\n  });\n  \n  userSubmit() {\n    const username = this.userForm.value.username;\n    const password = this.userForm.value.password;\n    const password2 = this.userForm.value.password2;\n  \n    if (this.userForm.valid) {\n      if (password !== password2) {\n        this.errormsg = 'Les mots de passe ne correspondent pas!';\n      } else {\n        this.service.createData(this.userForm.value).subscribe((res) => {\n          console.log(res, 'res==>');\n          this.userForm.reset();\n          this.successmsg = res.message;\n        });\n      }\n    } else {\n      this.errormsg = 'Tous les champs doivent être complétés!';\n    }\n  }\n\n  passwordMatchValidator(control: AbstractControl): ValidationErrors | null {\n    const password = control.get('password')?.value;\n    const password2 = control.get('password2')?.value;\n  \n    return password === password2 ? null : { passwordMismatch: true };\n  }\n\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AACjD,SAAQC,SAAS,EAAEC,WAAW,EAAEC,UAAU,QAA0C,gBAAgB;AASpG,IAAaC,eAAe,GAA5B,MAAaA,eAAe;EAE1BC,YAAoBC,OAAyB,EAAUC,MAAqB;IAAxD,KAAAD,OAAO,GAAPA,OAAO;IAA4B,KAAAC,MAAM,GAANA,MAAM;IAU7D,KAAAC,QAAQ,GAAG,IAAIP,SAAS,CAAC;MACvB,UAAU,EAAE,IAAIC,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACM,QAAQ,CAAC;MACpD,UAAU,EAAE,IAAIP,WAAW,CAAC,EAAE,EAAEC,UAAU,CAACM,QAAQ,CAAC;MACpD,WAAW,EAAE,IAAIP,WAAW,CAAC,EAAE,EAAE,CAACC,UAAU,CAACM,QAAQ,EAAE,IAAI,CAACC,sBAAsB,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;KAC/F,CAAC;EAd6E;EAM/EC,QAAQA,CAAA;IACN,IAAI,CAACC,UAAU,GAAG,IAAI,CAACN,MAAM,CAACO,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,IAAI,CAAC;EAC3D;EAQAC,UAAUA,CAAA;IACR,MAAMC,QAAQ,GAAG,IAAI,CAACV,QAAQ,CAACW,KAAK,CAACD,QAAQ;IAC7C,MAAME,QAAQ,GAAG,IAAI,CAACZ,QAAQ,CAACW,KAAK,CAACC,QAAQ;IAC7C,MAAMC,SAAS,GAAG,IAAI,CAACb,QAAQ,CAACW,KAAK,CAACE,SAAS;IAE/C,IAAI,IAAI,CAACb,QAAQ,CAACc,KAAK,EAAE;MACvB,IAAIF,QAAQ,KAAKC,SAAS,EAAE;QAC1B,IAAI,CAACE,QAAQ,GAAG,yCAAyC;OAC1D,MAAM;QACL,IAAI,CAACjB,OAAO,CAACkB,UAAU,CAAC,IAAI,CAAChB,QAAQ,CAACW,KAAK,CAAC,CAACM,SAAS,CAAEC,GAAG,IAAI;UAC7DC,OAAO,CAACC,GAAG,CAACF,GAAG,EAAE,QAAQ,CAAC;UAC1B,IAAI,CAAClB,QAAQ,CAACqB,KAAK,EAAE;UACrB,IAAI,CAACC,UAAU,GAAGJ,GAAG,CAACK,OAAO;QAC/B,CAAC,CAAC;;KAEL,MAAM;MACL,IAAI,CAACR,QAAQ,GAAG,yCAAyC;;EAE7D;EAEAb,sBAAsBA,CAACsB,OAAwB;IAC7C,MAAMZ,QAAQ,GAAGY,OAAO,CAAChB,GAAG,CAAC,UAAU,CAAC,EAAEG,KAAK;IAC/C,MAAME,SAAS,GAAGW,OAAO,CAAChB,GAAG,CAAC,WAAW,CAAC,EAAEG,KAAK;IAEjD,OAAOC,QAAQ,KAAKC,SAAS,GAAG,IAAI,GAAG;MAAEY,gBAAgB,EAAE;IAAI,CAAE;EACnE;CAGD;AA9CY7B,eAAe,GAAA8B,UAAA,EAL3BlC,SAAS,CAAC;EACTmC,QAAQ,EAAE,YAAY;EACtBC,WAAW,EAAE,yBAAyB;EACtCC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWjC,eAAe,CA8C3B;SA9CYA,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}